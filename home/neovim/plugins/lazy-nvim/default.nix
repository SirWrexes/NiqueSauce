{
  config,
  pkgs,
  lib,
  ...
}:

let
  inherit (builtins) typeOf;
  inherit (lib.options) mkOption mkPackageOption;
  inherit (lib.strings) readFile hasSuffix;
  inherit (lib.generators) mkLuaInline;

  cfg = config.programs.neovim.lazy-nvim;

  toLua = lib.generators.toLua { multiline = true; };

  mkDescribedEnableOption =
    name: extraDescription:
    with lib.types;
    mkOption {
      type = bool;
      default = false;
      description = "Whether to enable ${name}.\n" + extraDescription;
      example = "true";
    };

  extraTypes = with lib.types; rec {
    pathIsLua = path: hasSuffix ".lua" "${path}";

    luaFile = addCheck path (pathIsLua) // {
      name = "luaFile";
      description = "Path to a Lua source file";
    };

    luaSnippet = either luaInline luaFile;

    luaPredicate = either bool luaSnippet;

    readLuaSnippet = x: if typeOf x == "path" && pathIsLua x then mkLuaInline (readFile x) else x;

    onlyTrue = addCheck bool (x: x) // {
      name = "boolTrue";
      description = "A boolean value that can only be true";
    };
  };

  types = lib.types // extraTypes;
in
{
  imports = [ ./lazy-spec.nix ];

  options.programs.neovim.lazy-nvim = {
    enable = mkDescribedEnableOption "LazyVim plugin manager for NeoVim" ''
      Important note:
        While configuring this module, you might come accross options that have descriptions
        mentioning Lua function signatures as their accepted type. It means that the option,
        if you chose to use Lua code for it, must receive a value of type `lib.types.luaInline`
        or a path to a Lua file that will be read by this module.

        Aside from the type checking of the Nix value, there is no way to verify what you
        pass to those options is valid Lua code. It is up to you to make sure that you properly
        wrote your Lua snippet.

      Lastly, I highly recommend checking out the official docs for the plugin: https://lazy.folke.io/

      Enjoy!
    '';

    lazyByDefault = mkDescribedEnableOption "lazy-loading for ALL plugins by default" ''
      Make all plugins lazy by default. Note that this could end up in some plugins never actually
      activating, or worse even, wrong order of loading which could result in broken dependcy chains.

      Quote from Folke's docs: 
      > Set this to `true` to have all your plugins lazy-loaded by default.
      > Only do this if you know what you are doing, as it can lead to unexpected behavior.

      See https://lazy.folke.io/configuration
    '';

    defaultEnablePredicate =
      with types;
      mkOption {
        readOnly = true;
        type = nullOr luaPredicate;
        default = null;
        description = ''
          Default `cond` that is assigned to all plugins. You can use it to globally disable plugins in bulk.
          When false, or if the function returns false, then the plugin will not be included in the spec.

          Lazy.nvim ignores extraneous keys on your specs, so you could, for instance, set a common flag
          to check inside them in order to then evaluate some condition to decide if a plugin must
          be activated or not.

          Expected luaSnippet content type:
          ```
          fun(self: LazyPlugin): boolean?
          ```
        '';
        example = ''
          lib.types.mkLuaInline ''''
            function (self)
              if jit.os:find("macos") and self.disableOnMac == true then
                return false
              end
            end
          ''''
        '';
      };

    toLua =
      with types;
      mkOption {
        type = functionTo str;
        default = toLua;
        readOnly = true;
        description = ''
          Generator used to convert expressions to Lua.
          Use this insead of `lib.generators.toLua` for consistency between the code generated by this module and yours.
        '';
      };

    types =
      with types;
      mkOption {
        type = attrs;
        default = types;
        visible = false;
        internal = true;
      };

    package = mkPackageOption pkgs.vimPlugins [ "lazy-nvim" ] { };
  };

  config =
    let
      inherit (lib.lists) concatMap unique;

      flattenDepsTree = concatMap (
        {
          dependencies,
          package,
          enabled,
          cond,
          ...
        }:
        if enabled != false && cond != false then
          (if package != null then [ package ] else [ ])
          ++ (if dependencies != null then flattenDepsTree dependencies else [ ])
        else
          [ ]
      );
    in
    lib.mkIf
      (
        cfg.enable
        && lib.asserts.assertMsg config.programs.neovim.enable ''
          Hey there ! 󱠡
          I see you're trying to use Lazy.nvim, but it seems NeoVim is not enabled in your home manager config.
          Please enable it and try again.

          󱩖 Put this somewhere in your *home manager* config:
            programs.neovim.enable = true;
        ''
      )
      {
        programs.neovim = {
          extraLuaPackages = luapkgs: with luapkgs; [ rocks-nvim ];
          extraPackages = [ cfg.package ] ++ unique (flattenDepsTree cfg.plugins);
        };

        # Keep the empty lines above and below the lua code to prevent the statements
        # sticking to other lines during concatenation.
        programs.neovim.extraLuaConfig = ''

          vim.opt.rtp:prepend("${cfg.package}")
          require("lazy").setup(${
            toLua {
              # Disable automatic plugin updates.
              # Plugins will be installed in the Nix store, as opposed to the usual Git flavoured way Lazy.nvim normally uses.
              checker.enable = false;

              # Prevent Lazy.nvim from installing missing plugins.
              # Since we're bypassing the Git installation of plugins, auto-installation shouldn't do anything.
              install.missing = true;

              lazy = cfg.lazyByDefault;
              cond = cfg.defaultEnablePredicate;
              spec = cfg.finalSpec;
            }
          })

        '';
      };
}
